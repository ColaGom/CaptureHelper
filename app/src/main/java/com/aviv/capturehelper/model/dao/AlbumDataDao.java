package com.aviv.capturehelper.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.aviv.capturehelper.model.dao.AlbumData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALBUM_DATA".
*/
public class AlbumDataDao extends AbstractDao<AlbumData, Long> {

    public static final String TABLENAME = "ALBUM_DATA";

    /**
     * Properties of entity AlbumData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property Isnew = new Property(4, Boolean.class, "isnew", false, "ISNEW");
        public final static Property Isfavorite = new Property(5, Boolean.class, "isfavorite", false, "ISFAVORITE");
        public final static Property Jsonobject = new Property(6, String.class, "jsonobject", false, "JSONOBJECT");
    };


    public AlbumDataDao(DaoConfig config) {
        super(config);
    }
    
    public AlbumDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALBUM_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PATH\" TEXT," + // 2: path
                "\"DATE\" INTEGER," + // 3: date
                "\"ISNEW\" INTEGER," + // 4: isnew
                "\"ISFAVORITE\" INTEGER," + // 5: isfavorite
                "\"JSONOBJECT\" TEXT);"); // 6: jsonobject
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALBUM_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AlbumData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
 
        Boolean isnew = entity.getIsnew();
        if (isnew != null) {
            stmt.bindLong(5, isnew ? 1L: 0L);
        }
 
        Boolean isfavorite = entity.getIsfavorite();
        if (isfavorite != null) {
            stmt.bindLong(6, isfavorite ? 1L: 0L);
        }
 
        String jsonobject = entity.getJsonobject();
        if (jsonobject != null) {
            stmt.bindString(7, jsonobject);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AlbumData readEntity(Cursor cursor, int offset) {
        AlbumData entity = new AlbumData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isnew
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isfavorite
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // jsonobject
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AlbumData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setIsnew(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setIsfavorite(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setJsonobject(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AlbumData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AlbumData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
